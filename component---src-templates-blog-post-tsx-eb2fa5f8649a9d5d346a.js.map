{"version":3,"file":"component---src-templates-blog-post-tsx-eb2fa5f8649a9d5d346a.js","mappings":"qJAiDA,IAjCgCA,IAAuC,IAADC,EAAA,IAArC,YAAEC,EAAW,MAAEC,EAAK,SAAEC,GAAUJ,EAC/D,MAAM,KAAEK,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBL,GAAeG,EAAKG,aAAaN,aACnD,KAAEO,GAASJ,EAAKG,aAAaE,OAC7BC,EAAkBF,EAAI,KAAqB,QAArBR,EAAII,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBE,OAEnD,OACES,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAWT,EAAK,MAAMQ,GACtBC,EAAAA,cAAA,QAAMH,KAAK,cAAcI,QAASN,IAClCK,EAAAA,cAAA,QAAME,SAAS,WAAWD,QAASV,IACnCS,EAAAA,cAAA,QAAME,SAAS,iBAAiBD,QAASN,IACzCK,EAAAA,cAAA,QAAME,SAAS,UAAUD,QAAQ,YAChCT,EACA,C,6GCvCP,MAsDaW,EAAOC,IAAwC,IAArCC,MAAQC,eAAgBC,IAAQH,EACrD,OACEJ,EAAAA,cAACQ,EAAAA,EAAG,CACFjB,MAAOgB,EAAKE,YAAYlB,MACxBD,YAAaiB,EAAKE,YAAYnB,aAAeiB,EAAKG,SAClD,EAIN,UA/DyBtB,IAGnB,IAAAC,EAAA,IAFJgB,MAAM,SAAEM,EAAQ,KAAEC,EAAI,KAAEnB,EAAMa,eAAgBC,GAAM,SACpDM,GACDzB,EACC,MAAM0B,GAA6B,QAAjBzB,EAAAI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBE,QAAK,QAE1C,OACES,EAAAA,cAACe,EAAAA,EAAM,CAACF,SAAUA,EAAUtB,MAAOuB,GACjCd,EAAAA,cAAA,WACEgB,UAAU,YACVC,WAAS,EACTC,SAAS,6BAETlB,EAAAA,cAAA,cACEA,EAAAA,cAAA,MAAImB,SAAS,YAAYZ,EAAKE,YAAYlB,OAC1CS,EAAAA,cAAA,SAAIO,EAAKE,YAAYW,OAEvBpB,EAAAA,cAAA,WACEqB,wBAAyB,CAAEC,OAAQf,EAAKgB,MACxCJ,SAAS,gBAEXnB,EAAAA,cAAA,WACAA,EAAAA,cAAA,gBAEFA,EAAAA,cAAA,OAAKgB,UAAU,iBACbhB,EAAAA,cAAA,MACEwB,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX7B,EAAAA,cAAA,UACGW,GACCX,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAAO,KACtCvB,EAASF,YAAYlB,QAI9BS,EAAAA,cAAA,UACGY,GACCZ,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC7BtB,EAAKH,YAAYlB,MAAM,SAM3B,C","sources":["webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface SeoProps {\n  description?: string;\n  title: string;\n  children?: any;\n}\n\nconst Seo: React.FC<SeoProps> = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            author {\n              name\n            }\n            description\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const { name } = site.siteMetadata.author;\n  const defaultTitle = `${name} ${site.siteMetadata?.title}`;\n\n  return (\n    <>\n      <title>{`${title} | ${defaultTitle}`}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {children}\n    </>\n  );\n};\n\nexport default Seo;\n","import * as React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '@/components/layout';\nimport Seo from '@/components/seo';\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer></footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_ref","_site$siteMetadata","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","name","author","defaultTitle","React","content","property","Head","_ref2","data","markdownRemark","post","Seo","frontmatter","excerpt","previous","next","location","siteTitle","Layout","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}