{"version":3,"file":"component---src-pages-using-typescript-tsx-50f0048ab3bccce1f2c1.js","mappings":"uJAmDA,IA1CsCA,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAUH,EAClE,MACMI,EAD6B,MAChBH,EAASI,SAiB5B,OACEC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UAAQC,UAAU,iBAChBD,EAAAA,cAAA,MAAIC,UAAU,gBACZD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAI,UAGjBH,EAAAA,cAAA,OAAKC,UAAU,iBAAiB,oBAAmBH,GACjDE,EAAAA,cAAA,YAAOH,GACPG,EAAAA,cAAA,cAAQ,wBAENA,EAAAA,cAAA,KACEI,KAAK,kDACLH,UAAU,cACX,yBAKJ,C,+CCFP,IA7BgCP,IAAuC,IAADW,EAAA,IAArC,YAAEC,EAAW,MAAEV,EAAK,SAAEC,GAAUH,EAC/D,MAAM,KAAEa,IAASC,EAAAA,EAAAA,gBAAe,cAa1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApBN,EAAGE,EAAKG,oBAAY,IAAAL,OAAA,EAAjBA,EAAmBT,MAExC,OACEI,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQW,EAAkBf,EAAK,MAAMe,EAAiBf,GACtDI,EAAAA,cAAA,QAAMY,KAAK,cAAcC,QAASJ,IAClCT,EAAAA,cAAA,QAAMc,SAAS,WAAWD,QAASjB,IACnCI,EAAAA,cAAA,QAAMc,SAAS,iBAAiBD,QAASJ,IACzCT,EAAAA,cAAA,QAAMc,SAAS,UAAUD,QAAQ,YAChChB,EACA,C,6GC5BP,MA+BakB,EAA0BA,IAAMf,EAAAA,cAACgB,EAAAA,EAAG,CAACpB,MAAM,qBAExD,UAjCwDF,IAAA,IAAC,KACvDuB,EAAI,KACJC,EAAI,SACJvB,GACDD,EAAA,OACCM,EAAAA,cAACmB,EAAAA,EAAM,CAACvB,MAAM,mBAAmBD,SAAUA,GACzCK,EAAAA,cAAA,UAAI,0CACJA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,YAAM,YAAe,0CAClCA,EAAAA,cAAA,YAAM,YAAe,qCACzCA,EAAAA,cAAA,YAAM,oBAAuB,MAEvCA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,UAAI,cAAe,oBACxDA,EAAAA,cAAA,UAAI,cAAe,gBAAaA,EAAAA,cAAA,UAAI,YAAa,UAEvDA,EAAAA,cAAA,SAAG,kCAC8BkB,EAAK,uBAAqB,IACxDD,EAAKV,KAAKa,UAAU,KAEvBpB,EAAAA,cAAA,SAAG,kCAC+B,IAChCA,EAAAA,cAAA,KAAGI,KAAK,yEAAwE,kCAE5E,KAGNJ,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'gatsby';\n\ninterface LayoutProps {\n  location: { pathname: string };\n  title: string;\n  children?: any;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n  let header;\n\n  // if (isRootPath) {\n  //   header = (\n  //     <h1 className=\"main-heading\">\n  //       <Link to=\"/\">{title}</Link>\n  //     </h1>\n  //   );\n  // } else {\n  //   header = (\n  //     <Link className=\"header-link-home\" to=\"/\">\n  //       {title}\n  //     </Link>\n  //   );\n  // }\n\n  return (\n    <>\n      <header className=\"global-header\">\n        <h2 className=\"main-heading\">\n          <Link to=\"/\">메인으로</Link>\n        </h2>\n      </header>\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        <main>{children}</main>\n        <footer>\n          © Junghoe, Built with\n          <a\n            href=\"https://github.com/gatsbyjs/gatsby-starter-blog\"\n            className=\"staterLink\"\n          >\n            gatsby-starter-blog\n          </a>\n        </footer>\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface SeoProps {\n  description?: string;\n  title: string;\n  children?: any;\n}\n\nconst Seo: React.FC<SeoProps> = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {children}\n    </>\n  );\n};\n\nexport default Seo;\n","// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n"],"names":["_ref","location","title","children","isRootPath","pathname","React","className","Link","to","href","_site$siteMetadata","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","Head","Seo","data","path","Layout","buildTime"],"sourceRoot":""}